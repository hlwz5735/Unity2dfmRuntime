//------------------------------------------------
//--- 010 Editor v11.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
typedef struct 
{
    CHAR  scriptName[32] <comment="脚本名", bgcolor=0xF0F0F0>;
    SHORT scriptIndex    <comment="脚本格子起始索引", bgcolor=0x00FF00>;
    BYTE  unknownFlag1;
    BYTE  isDefaultScript <comment="是否为缺省脚本">;
    BYTE  bytes[3]       <comment="未知", bgcolor=0x00FFFF>;
} SCRIPT <comment=GetScriptLineName>;

char[] GetScriptLineName(SCRIPT &s)
{
    return s.scriptName;
}

typedef struct
{
    uchar scriptType <bgcolor=cGreen>;
    uchar unknown1;
    
    BYTE bytes[14];
} SCRIPT_ITEM;

typedef struct {
    int unknownFlag1;
    int width;
    int height;
    int hasPrivatePalettle;
    int size;
    // 如果帧大小为0，则判断精灵帧的宽高，如果也为0，则这条精灵帧是空的，否则
    // 按照每个像素占1字节主动计算帧大小（即未压缩的图片），如果精灵使用了私有
    // 调色盘，则追加1kb的私有调色盘内容
    // 对于被压缩的图片，直接取此处定义的size大小即可
    if (size == 0)
    {
        local int tSize = width * height;
        if (tSize > 0)
        {
            byte frameContent[tSize + (hasPrivatePalettle ? 1024 : 0)];
        }
    }
    else
    {
        byte frameContent[size];
    }
} SPRITE_FRAME <read=printSpriteFrame>;

string printSpriteFrame(SPRITE_FRAME &sf)
{
    string s;   
    SPrintf(s, "%d x %d", sf.width, sf.height);
    if (sf.size == 0)
    {
        s = s + "(origin)";
    }
    else
    {
        s = s + "(compressed)";
    }
    return s;
}

typedef struct {
    uchar blue;
    uchar green;
    uchar red;
    uchar alpha;    
} ColorBGRA <read=getColorValue>;

string getColorValue(ColorBGRA& color)
{
    string s;
    local uchar alpha = color.alpha == 0 ? 0 : 255;
    return SPrintf(s, "0x%02x%02x%02x%02x", color.red, color.green, color.blue, alpha);
}

typedef struct {
    ColorBGRA colors[256];
    // 共享调色盘之后，是32字节的空行
    int palettleGap[8] <bgcolor=cYellow>;
} Palettle;

typedef struct {
    int UnknownLengthBeforeName;
    char name[32];
    int size;
    short unknown2;
    if (size > 0)
    {
        byte data[size];
    }
} SoundData;

//////////////////////// 开始 ///////////////////////////

BYTE fileSignature[16] <name="文件头标记">;
BYTE heroName[256]     <name="角色名">;

// 脚本表基本信息
int scriptCount        <comment="脚本行总数", bgcolor=cRed>;
SCRIPT scripts[scriptCount];

// 脚本格子基本信息
int scriptItemCount <comment="脚本格子总数", bgcolor=cRed>;
SCRIPT_ITEM scriptItems[scriptItemCount];

// 精灵帧信息
int frameCount <comment="帧总数", bgcolor=cRed>;
struct {
    SPRITE_FRAME frame[frameCount] <optimize=false>;
} frames <comment="精灵帧具体内容">;

// 共享调色盘信息，一共8个共享调色盘
Palettle palettles[8];

int soundCount <bgcolor=cRed>;

struct {
    SoundData sound[soundCount] <optimize=false>;
} sounds <comment="声音具体信息">;

byte tail;
