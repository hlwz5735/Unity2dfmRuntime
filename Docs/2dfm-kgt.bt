//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
typedef struct 
{
    CHAR  scriptName[32] <comment="脚本名", bgcolor=cGreen>;
    SHORT scriptIndex    <comment="脚本格子起始索引", bgcolor=0xFFAAAA>;
    BYTE unknownFlags[5] <comment="未知内容", bgcolor=cRed>;
    // BYTE  unknownFlag1;
    // BYTE  isDefaultScript <comment="是否为缺省脚本", bgcolor=cRed>;
    // BYTE  bytes[3]       <comment="未知", bgcolor=cRed>;
} SCRIPT <comment=GetScriptLineName>;

char[] GetScriptLineName(SCRIPT &s)
{
    return s.scriptName;
}

typedef struct
{
    SHORT scriptType <bgcolor=cGreen>;
    BYTE bytes[14] <fgcolor=0x00AA00>;
} SCRIPT_ITEM <comment="脚本项">;

typedef struct {
    int unknownFlag1;
    int width;
    int height;
    int hasPrivatePalettle;
    int size;
    // 如果帧大小为0，则判断精灵帧的宽高，如果也为0，则这条精灵帧是空的，否则
    // 按照每个像素占1字节主动计算帧大小（即未压缩的图片），如果精灵使用了私有
    // 调色盘，则追加1kb的私有调色盘内容
    // 对于被压缩的图片，直接取此处定义的size大小即可
    if (size == 0)
    {
        local int tSize = width * height;
        if (tSize > 0)
        {
            byte frameContent[tSize + (hasPrivatePalettle ? 1024 : 0)];
        }
    }
    else
    {
        byte frameContent[size];
    }
} SPRITE_FRAME <name="精灵帧", read=printSpriteFrame>;

string printSpriteFrame(SPRITE_FRAME &sf)
{
    string s;   
    SPrintf(s, "%d x %d", sf.width, sf.height);
    if (sf.size == 0)
    {
        s = s + "(origin)";
    }
    else
    {
        s = s + "(compressed)";
    }
    return s;
}

typedef struct {
    uchar blue;
    uchar green;
    uchar red;
    uchar alpha;    
} ColorBGRA <read=getColorValue>;

string getColorValue(ColorBGRA& color)
{
    string s;
    local uchar alpha = color.alpha == 0 ? 0 : 255;
    return SPrintf(s, "0x%02x%02x%02x%02x", color.red, color.green, color.blue, alpha);
}

typedef struct {
    ColorBGRA colors[256];
    // 共享调色盘之后，是32字节的空行
    int palettleGap[8] <bgcolor=cYellow>;
} Palettle <name="共享调色盘">;

typedef struct {
    int unknown1 <name="未知整型数据1">;
    char name[32];
    int size;
    byte soundType <name="声音类型", comment="1.WAV;2.MIDI;3.CDDA">;
    byte soundTrack <name="音轨", comment="仅在CDDA下有效">;
    if (size > 0)
    {
        byte data[size] <name="声音数据">;
    }
} SoundData <name="声音", comment=GetSoundName>;

char[] GetSoundName(SoundData &s)
{
    return s.name;
}

typedef struct {
    char playerName[256] <name="可玩角色名">;
} PlayerInfo;

typedef struct {
    char reactionName[32] <name="受击反应名">;
    int unknownFlags <name="未知的设置项们">;
} ReactionItem <name="受击反应">;

typedef struct {
    char name[32] <name="投掷反应名">;
} ThrowReaction;

typedef struct {
    byte stageBytes[256] <name="场景信息">;
} StageInfo;

//////////////////////// 开始 ///////////////////////////

BYTE fileSignature[16] <name="文件头标记">;
BYTE projectName[256]     <name="项目名">;

// 脚本表基本信息
int scriptCount        <name="脚本总数", bgcolor=cGreen>;
SCRIPT scripts[scriptCount] <name="脚本索引表", bgcolor=0xF0F0F0>;

// 脚本格子基本信息
int scriptItemCount <name="脚本格子总数", bgcolor=cRed>;
SCRIPT_ITEM scriptItems[scriptItemCount] <name="脚本项表">;

// 精灵帧总数
int frameCount <name="精灵帧总数">;
struct {
    SPRITE_FRAME frame[frameCount] <optimize=false>;
} frames <comment="精灵帧具体内容">;

// 共享调色盘信息，一共8个共享调色盘
Palettle palettles[8];

int soundCount <name="声音总数", bgcolor=cRed>;

struct {
    SoundData sound[soundCount] <optimize=false>;
} sounds <comment="声音具体信息">;

int playerNameGap <name="角色名字空隙">;
PlayerInfo playerInfos[50] <name="玩家名信息">;

ReactionItem reactions[200] <name="受击反应列表">;

int stageGap <name="场景信息分隔标记", comment="固定值02 00 00 00">;

ubyte unknownFlag <name="场景信息前的未知字节数据">;
ubyte atkFreezeTime <name="攻击硬直时间">;
ubyte dfsFreezeTime <name="防御硬直时间">;
ubyte cclFreezeTime <name="攻击互抵硬直时间">;

StageInfo stageInfos[50] <name="场景列表">;
StageInfo demoInfos[100] <name="DEMO列表">;

byte titleDemoId;
byte charSelFor1pDemoId;
byte singleDemoId;
byte teamDemoId;
byte gameoverDemoId;
byte startDemoId;
byte unknownDemoId1;
byte unknownDemoId2;

int generalSettings <name="项目通常设置", comment="只有最低8位有意义，从高到低分别为：x,标题画面按键才出现光标，小血槽旁显示血量，使用团队对战模式，使用单人对战模式，使用故事模式，攻击互抵，生成不能被编辑器读取的文件">;

ThrowReaction throwReactions[200] <name="投掷反应列表">;

byte unknownGapBytes[264] <name="未知的264字节数据", bgcolor=cGray>;

ushort charSelStartPosX <name="角色选择框的开始位置X">;
ushort charSelStartPosY <name="角色选择框的开始位置Y">;
ushort charImgWidth <name="角色选择画面的角色图宽度">;
ushort charImgHeight <name="角色选择画面的角色图高度">;
ushort charSelColCount <name="角色选择框的列数">;
ushort charSelRowCount <name="角色选择框的行数">;
ushort charSelForP1PosX <name="1P的角色半身图展示位置X">;
ushort charSelForP1PosY <name="1P的角色半身图展示位置Y">;
short charSelForTeamP1RangeX <name="1P多人选择时的偏移度X">;
short charSelForTeamP1RangeY <name="1P多人选择时的偏移度Y">;
ushort charSelForP2PosX <name="2P的角色选择位置X">;
ushort charSelForP2PosY <name="2P的角色选择位置Y">;
short charSelForP2RangeX <name="2P多人选择时的偏移度X">;
short charSelForP2RangeY <name="2P多人选择时的偏移度Y">;

byte unknown996Bytes[996] <name="结尾996字节空白未知数据", bgcolor=cGray>;
